generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model transaction {
  id              Int      @id @default(autoincrement())
  userId          Int
  walletId        Int
  wagerId         Int?
  type            String
  currency        String
  amount          Float
  vsAmount        Float
  solPrice        Float?
  usdValue        Float?
  status          String   @default("completed")
  transactionHash String?
  side            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  user            user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Transaction_userId_fkey")
  wallet          wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade, map: "Transaction_walletId_fkey")
  wager           wager?   @relation(fields: [wagerId], references: [id], onDelete: SetNull, map: "Transaction_wagerId_fkey")

  @@index([userId], map: "Transaction_userId_fkey")
  @@index([walletId], map: "Transaction_walletId_fkey")
  @@index([wagerId], map: "Transaction_wagerId_fkey")
}

model user {
  id              Int           @id @default(autoincrement())
  googleId        String?       @unique(map: "User_googleId_key")
  email           String?       @unique(map: "User_email_key")
  name            String?
  avatar          String?
  provider        String        @default("google")
  role            String        @default("user")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  lastLogin       DateTime?
  solanaPublicKey String?       @unique(map: "User_solanaPublicKey_key")
  transaction     transaction[]
  wager           wager[]
  wallet          wallet?
}

model wager {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  imageUrl     String?
  category     String
  side1        String
  side2        String
  wagerEndTime DateTime
  isPublic     Boolean       @default(true)
  winningSide  String?
  wagerStatus  String        @default("active")
  side1Amount  Float         @default(0)
  side2Amount  Float         @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  createdById  Int
  user         user          @relation(fields: [createdById], references: [id], map: "Wager_createdById_fkey")
  transaction  transaction[]

  @@index([createdById], map: "Wager_createdById_fkey")
}

model wallet {
  id          Int           @id @default(autoincrement())
  userId      Int           @unique(map: "Wallet_userId_key")
  solAmount   Float         @default(0)
  usdcAmount  Float         @default(0)
  vsAmount    Float         @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  transaction transaction[]
  user        user          @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Wallet_userId_fkey")
}
